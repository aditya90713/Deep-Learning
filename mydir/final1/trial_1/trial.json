{"trial_id": "1", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "num_layers", "default": null, "conditions": [], "min_value": 1, "max_value": 10, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "neurons0", "default": null, "conditions": [], "min_value": 8, "max_value": 128, "step": 8, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation0", "default": "relu", "conditions": [], "values": ["relu", "sgd", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout0", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Choice", "config": {"name": "optimizer", "default": "adam", "conditions": [], "values": ["adam", "sgd", "rmsprop", "adadelta", "nadam"], "ordered": false}}, {"class_name": "Int", "config": {"name": "neurons1", "default": null, "conditions": [], "min_value": 8, "max_value": 128, "step": 8, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation1", "default": "relu", "conditions": [], "values": ["relu", "sgd", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout1", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "neurons2", "default": null, "conditions": [], "min_value": 8, "max_value": 128, "step": 8, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation2", "default": "relu", "conditions": [], "values": ["relu", "sgd", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout2", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "neurons3", "default": null, "conditions": [], "min_value": 8, "max_value": 128, "step": 8, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation3", "default": "relu", "conditions": [], "values": ["relu", "sgd", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout3", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "neurons4", "default": null, "conditions": [], "min_value": 8, "max_value": 128, "step": 8, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation4", "default": "relu", "conditions": [], "values": ["relu", "sgd", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout4", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "neurons5", "default": null, "conditions": [], "min_value": 8, "max_value": 128, "step": 8, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation5", "default": "relu", "conditions": [], "values": ["relu", "sgd", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout5", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "neurons6", "default": null, "conditions": [], "min_value": 8, "max_value": 128, "step": 8, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation6", "default": "relu", "conditions": [], "values": ["relu", "sgd", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout6", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "neurons7", "default": null, "conditions": [], "min_value": 8, "max_value": 128, "step": 8, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation7", "default": "relu", "conditions": [], "values": ["relu", "sgd", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout7", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}, {"class_name": "Int", "config": {"name": "neurons8", "default": null, "conditions": [], "min_value": 8, "max_value": 128, "step": 8, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation8", "default": "relu", "conditions": [], "values": ["relu", "sgd", "tanh"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dropout8", "default": 0.1, "conditions": [], "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], "ordered": true}}], "values": {"num_layers": 7, "neurons0": 128, "activation0": "sgd", "dropout0": 0.4, "optimizer": "sgd", "neurons1": 64, "activation1": "sgd", "dropout1": 0.5, "neurons2": 32, "activation2": "tanh", "dropout2": 0.3, "neurons3": 8, "activation3": "sgd", "dropout3": 0.7, "neurons4": 128, "activation4": "tanh", "dropout4": 0.6, "neurons5": 48, "activation5": "tanh", "dropout5": 0.5, "neurons6": 8, "activation6": "sgd", "dropout6": 0.5, "neurons7": 40, "activation7": "sgd", "dropout7": 0.1, "neurons8": 80, "activation8": "sgd", "dropout8": 0.6}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"E:\\anaconda\\lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 270, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"E:\\anaconda\\lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 235, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"E:\\anaconda\\lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 287, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"E:\\anaconda\\lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 213, in _build_and_fit_model\n    model = self._try_build(hp)\n  File \"E:\\anaconda\\lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 155, in _try_build\n    model = self._build_hypermodel(hp)\n  File \"E:\\anaconda\\lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 146, in _build_hypermodel\n    model = self.hypermodel.build(hp)\n  File \"C:\\Users\\ADITYA\\AppData\\Local\\Temp\\ipykernel_9368\\3555383571.py\", line 7, in build_model\n    model.add(Dense(\n  File \"E:\\anaconda\\lib\\site-packages\\keras\\src\\dtensor\\utils.py\", line 96, in _wrap_function\n    init_method(layer_instance, *args, **kwargs)\n  File \"E:\\anaconda\\lib\\site-packages\\keras\\src\\layers\\core\\dense.py\", line 125, in __init__\n    self.activation = activations.get(activation)\n  File \"E:\\anaconda\\lib\\site-packages\\tensorflow\\python\\util\\traceback_utils.py\", line 153, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"E:\\anaconda\\lib\\site-packages\\keras\\src\\activations.py\", line 705, in get\n    return deserialize(identifier, use_legacy_format=use_legacy_format)\n  File \"E:\\anaconda\\lib\\site-packages\\keras\\src\\activations.py\", line 660, in deserialize\n    raise ValueError(\nValueError: Unknown activation function 'sgd' cannot be deserialized.\n"}